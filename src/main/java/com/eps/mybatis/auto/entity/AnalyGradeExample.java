package com.eps.mybatis.auto.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class AnalyGradeExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    protected Integer limitStart;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    protected Integer limitSize;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public AnalyGradeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public void setLimitStart(Integer limitStart) {
        this.limitStart=limitStart;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public Integer getLimitStart() {
        return limitStart;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public void setLimitSize(Integer limitSize) {
        this.limitSize=limitSize;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public Integer getLimitSize() {
        return limitSize;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andGradeIdIsNull() {
            addCriterion("GRADE_ID is null");
            return (Criteria) this;
        }

        public Criteria andGradeIdIsNotNull() {
            addCriterion("GRADE_ID is not null");
            return (Criteria) this;
        }

        public Criteria andGradeIdEqualTo(Integer value) {
            addCriterion("GRADE_ID =", value, "gradeId");
            return (Criteria) this;
        }

        public Criteria andGradeIdNotEqualTo(Integer value) {
            addCriterion("GRADE_ID <>", value, "gradeId");
            return (Criteria) this;
        }

        public Criteria andGradeIdGreaterThan(Integer value) {
            addCriterion("GRADE_ID >", value, "gradeId");
            return (Criteria) this;
        }

        public Criteria andGradeIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("GRADE_ID >=", value, "gradeId");
            return (Criteria) this;
        }

        public Criteria andGradeIdLessThan(Integer value) {
            addCriterion("GRADE_ID <", value, "gradeId");
            return (Criteria) this;
        }

        public Criteria andGradeIdLessThanOrEqualTo(Integer value) {
            addCriterion("GRADE_ID <=", value, "gradeId");
            return (Criteria) this;
        }

        public Criteria andGradeIdIn(List<Integer> values) {
            addCriterion("GRADE_ID in", values, "gradeId");
            return (Criteria) this;
        }

        public Criteria andGradeIdNotIn(List<Integer> values) {
            addCriterion("GRADE_ID not in", values, "gradeId");
            return (Criteria) this;
        }

        public Criteria andGradeIdBetween(Integer value1, Integer value2) {
            addCriterion("GRADE_ID between", value1, value2, "gradeId");
            return (Criteria) this;
        }

        public Criteria andGradeIdNotBetween(Integer value1, Integer value2) {
            addCriterion("GRADE_ID not between", value1, value2, "gradeId");
            return (Criteria) this;
        }

        public Criteria andTestIdIsNull() {
            addCriterion("TEST_ID is null");
            return (Criteria) this;
        }

        public Criteria andTestIdIsNotNull() {
            addCriterion("TEST_ID is not null");
            return (Criteria) this;
        }

        public Criteria andTestIdEqualTo(Integer value) {
            addCriterion("TEST_ID =", value, "testId");
            return (Criteria) this;
        }

        public Criteria andTestIdNotEqualTo(Integer value) {
            addCriterion("TEST_ID <>", value, "testId");
            return (Criteria) this;
        }

        public Criteria andTestIdGreaterThan(Integer value) {
            addCriterion("TEST_ID >", value, "testId");
            return (Criteria) this;
        }

        public Criteria andTestIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("TEST_ID >=", value, "testId");
            return (Criteria) this;
        }

        public Criteria andTestIdLessThan(Integer value) {
            addCriterion("TEST_ID <", value, "testId");
            return (Criteria) this;
        }

        public Criteria andTestIdLessThanOrEqualTo(Integer value) {
            addCriterion("TEST_ID <=", value, "testId");
            return (Criteria) this;
        }

        public Criteria andTestIdIn(List<Integer> values) {
            addCriterion("TEST_ID in", values, "testId");
            return (Criteria) this;
        }

        public Criteria andTestIdNotIn(List<Integer> values) {
            addCriterion("TEST_ID not in", values, "testId");
            return (Criteria) this;
        }

        public Criteria andTestIdBetween(Integer value1, Integer value2) {
            addCriterion("TEST_ID between", value1, value2, "testId");
            return (Criteria) this;
        }

        public Criteria andTestIdNotBetween(Integer value1, Integer value2) {
            addCriterion("TEST_ID not between", value1, value2, "testId");
            return (Criteria) this;
        }

        public Criteria andSubjectIdIsNull() {
            addCriterion("SUBJECT_ID is null");
            return (Criteria) this;
        }

        public Criteria andSubjectIdIsNotNull() {
            addCriterion("SUBJECT_ID is not null");
            return (Criteria) this;
        }

        public Criteria andSubjectIdEqualTo(Integer value) {
            addCriterion("SUBJECT_ID =", value, "subjectId");
            return (Criteria) this;
        }

        public Criteria andSubjectIdNotEqualTo(Integer value) {
            addCriterion("SUBJECT_ID <>", value, "subjectId");
            return (Criteria) this;
        }

        public Criteria andSubjectIdGreaterThan(Integer value) {
            addCriterion("SUBJECT_ID >", value, "subjectId");
            return (Criteria) this;
        }

        public Criteria andSubjectIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("SUBJECT_ID >=", value, "subjectId");
            return (Criteria) this;
        }

        public Criteria andSubjectIdLessThan(Integer value) {
            addCriterion("SUBJECT_ID <", value, "subjectId");
            return (Criteria) this;
        }

        public Criteria andSubjectIdLessThanOrEqualTo(Integer value) {
            addCriterion("SUBJECT_ID <=", value, "subjectId");
            return (Criteria) this;
        }

        public Criteria andSubjectIdIn(List<Integer> values) {
            addCriterion("SUBJECT_ID in", values, "subjectId");
            return (Criteria) this;
        }

        public Criteria andSubjectIdNotIn(List<Integer> values) {
            addCriterion("SUBJECT_ID not in", values, "subjectId");
            return (Criteria) this;
        }

        public Criteria andSubjectIdBetween(Integer value1, Integer value2) {
            addCriterion("SUBJECT_ID between", value1, value2, "subjectId");
            return (Criteria) this;
        }

        public Criteria andSubjectIdNotBetween(Integer value1, Integer value2) {
            addCriterion("SUBJECT_ID not between", value1, value2, "subjectId");
            return (Criteria) this;
        }

        public Criteria andSchoolIdIsNull() {
            addCriterion("SCHOOL_ID is null");
            return (Criteria) this;
        }

        public Criteria andSchoolIdIsNotNull() {
            addCriterion("SCHOOL_ID is not null");
            return (Criteria) this;
        }

        public Criteria andSchoolIdEqualTo(Integer value) {
            addCriterion("SCHOOL_ID =", value, "schoolId");
            return (Criteria) this;
        }

        public Criteria andSchoolIdNotEqualTo(Integer value) {
            addCriterion("SCHOOL_ID <>", value, "schoolId");
            return (Criteria) this;
        }

        public Criteria andSchoolIdGreaterThan(Integer value) {
            addCriterion("SCHOOL_ID >", value, "schoolId");
            return (Criteria) this;
        }

        public Criteria andSchoolIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("SCHOOL_ID >=", value, "schoolId");
            return (Criteria) this;
        }

        public Criteria andSchoolIdLessThan(Integer value) {
            addCriterion("SCHOOL_ID <", value, "schoolId");
            return (Criteria) this;
        }

        public Criteria andSchoolIdLessThanOrEqualTo(Integer value) {
            addCriterion("SCHOOL_ID <=", value, "schoolId");
            return (Criteria) this;
        }

        public Criteria andSchoolIdIn(List<Integer> values) {
            addCriterion("SCHOOL_ID in", values, "schoolId");
            return (Criteria) this;
        }

        public Criteria andSchoolIdNotIn(List<Integer> values) {
            addCriterion("SCHOOL_ID not in", values, "schoolId");
            return (Criteria) this;
        }

        public Criteria andSchoolIdBetween(Integer value1, Integer value2) {
            addCriterion("SCHOOL_ID between", value1, value2, "schoolId");
            return (Criteria) this;
        }

        public Criteria andSchoolIdNotBetween(Integer value1, Integer value2) {
            addCriterion("SCHOOL_ID not between", value1, value2, "schoolId");
            return (Criteria) this;
        }

        public Criteria andTeacherIdIsNull() {
            addCriterion("TEACHER_ID is null");
            return (Criteria) this;
        }

        public Criteria andTeacherIdIsNotNull() {
            addCriterion("TEACHER_ID is not null");
            return (Criteria) this;
        }

        public Criteria andTeacherIdEqualTo(Integer value) {
            addCriterion("TEACHER_ID =", value, "teacherId");
            return (Criteria) this;
        }

        public Criteria andTeacherIdNotEqualTo(Integer value) {
            addCriterion("TEACHER_ID <>", value, "teacherId");
            return (Criteria) this;
        }

        public Criteria andTeacherIdGreaterThan(Integer value) {
            addCriterion("TEACHER_ID >", value, "teacherId");
            return (Criteria) this;
        }

        public Criteria andTeacherIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("TEACHER_ID >=", value, "teacherId");
            return (Criteria) this;
        }

        public Criteria andTeacherIdLessThan(Integer value) {
            addCriterion("TEACHER_ID <", value, "teacherId");
            return (Criteria) this;
        }

        public Criteria andTeacherIdLessThanOrEqualTo(Integer value) {
            addCriterion("TEACHER_ID <=", value, "teacherId");
            return (Criteria) this;
        }

        public Criteria andTeacherIdIn(List<Integer> values) {
            addCriterion("TEACHER_ID in", values, "teacherId");
            return (Criteria) this;
        }

        public Criteria andTeacherIdNotIn(List<Integer> values) {
            addCriterion("TEACHER_ID not in", values, "teacherId");
            return (Criteria) this;
        }

        public Criteria andTeacherIdBetween(Integer value1, Integer value2) {
            addCriterion("TEACHER_ID between", value1, value2, "teacherId");
            return (Criteria) this;
        }

        public Criteria andTeacherIdNotBetween(Integer value1, Integer value2) {
            addCriterion("TEACHER_ID not between", value1, value2, "teacherId");
            return (Criteria) this;
        }

        public Criteria andStudentNumIsNull() {
            addCriterion("STUDENT_NUM is null");
            return (Criteria) this;
        }

        public Criteria andStudentNumIsNotNull() {
            addCriterion("STUDENT_NUM is not null");
            return (Criteria) this;
        }

        public Criteria andStudentNumEqualTo(Integer value) {
            addCriterion("STUDENT_NUM =", value, "studentNum");
            return (Criteria) this;
        }

        public Criteria andStudentNumNotEqualTo(Integer value) {
            addCriterion("STUDENT_NUM <>", value, "studentNum");
            return (Criteria) this;
        }

        public Criteria andStudentNumGreaterThan(Integer value) {
            addCriterion("STUDENT_NUM >", value, "studentNum");
            return (Criteria) this;
        }

        public Criteria andStudentNumGreaterThanOrEqualTo(Integer value) {
            addCriterion("STUDENT_NUM >=", value, "studentNum");
            return (Criteria) this;
        }

        public Criteria andStudentNumLessThan(Integer value) {
            addCriterion("STUDENT_NUM <", value, "studentNum");
            return (Criteria) this;
        }

        public Criteria andStudentNumLessThanOrEqualTo(Integer value) {
            addCriterion("STUDENT_NUM <=", value, "studentNum");
            return (Criteria) this;
        }

        public Criteria andStudentNumIn(List<Integer> values) {
            addCriterion("STUDENT_NUM in", values, "studentNum");
            return (Criteria) this;
        }

        public Criteria andStudentNumNotIn(List<Integer> values) {
            addCriterion("STUDENT_NUM not in", values, "studentNum");
            return (Criteria) this;
        }

        public Criteria andStudentNumBetween(Integer value1, Integer value2) {
            addCriterion("STUDENT_NUM between", value1, value2, "studentNum");
            return (Criteria) this;
        }

        public Criteria andStudentNumNotBetween(Integer value1, Integer value2) {
            addCriterion("STUDENT_NUM not between", value1, value2, "studentNum");
            return (Criteria) this;
        }

        public Criteria andJoinNumIsNull() {
            addCriterion("JOIN_NUM is null");
            return (Criteria) this;
        }

        public Criteria andJoinNumIsNotNull() {
            addCriterion("JOIN_NUM is not null");
            return (Criteria) this;
        }

        public Criteria andJoinNumEqualTo(Integer value) {
            addCriterion("JOIN_NUM =", value, "joinNum");
            return (Criteria) this;
        }

        public Criteria andJoinNumNotEqualTo(Integer value) {
            addCriterion("JOIN_NUM <>", value, "joinNum");
            return (Criteria) this;
        }

        public Criteria andJoinNumGreaterThan(Integer value) {
            addCriterion("JOIN_NUM >", value, "joinNum");
            return (Criteria) this;
        }

        public Criteria andJoinNumGreaterThanOrEqualTo(Integer value) {
            addCriterion("JOIN_NUM >=", value, "joinNum");
            return (Criteria) this;
        }

        public Criteria andJoinNumLessThan(Integer value) {
            addCriterion("JOIN_NUM <", value, "joinNum");
            return (Criteria) this;
        }

        public Criteria andJoinNumLessThanOrEqualTo(Integer value) {
            addCriterion("JOIN_NUM <=", value, "joinNum");
            return (Criteria) this;
        }

        public Criteria andJoinNumIn(List<Integer> values) {
            addCriterion("JOIN_NUM in", values, "joinNum");
            return (Criteria) this;
        }

        public Criteria andJoinNumNotIn(List<Integer> values) {
            addCriterion("JOIN_NUM not in", values, "joinNum");
            return (Criteria) this;
        }

        public Criteria andJoinNumBetween(Integer value1, Integer value2) {
            addCriterion("JOIN_NUM between", value1, value2, "joinNum");
            return (Criteria) this;
        }

        public Criteria andJoinNumNotBetween(Integer value1, Integer value2) {
            addCriterion("JOIN_NUM not between", value1, value2, "joinNum");
            return (Criteria) this;
        }

        public Criteria andScoreAvgIsNull() {
            addCriterion("SCORE_AVG is null");
            return (Criteria) this;
        }

        public Criteria andScoreAvgIsNotNull() {
            addCriterion("SCORE_AVG is not null");
            return (Criteria) this;
        }

        public Criteria andScoreAvgEqualTo(Double value) {
            addCriterion("SCORE_AVG =", value, "scoreAvg");
            return (Criteria) this;
        }

        public Criteria andScoreAvgNotEqualTo(Double value) {
            addCriterion("SCORE_AVG <>", value, "scoreAvg");
            return (Criteria) this;
        }

        public Criteria andScoreAvgGreaterThan(Double value) {
            addCriterion("SCORE_AVG >", value, "scoreAvg");
            return (Criteria) this;
        }

        public Criteria andScoreAvgGreaterThanOrEqualTo(Double value) {
            addCriterion("SCORE_AVG >=", value, "scoreAvg");
            return (Criteria) this;
        }

        public Criteria andScoreAvgLessThan(Double value) {
            addCriterion("SCORE_AVG <", value, "scoreAvg");
            return (Criteria) this;
        }

        public Criteria andScoreAvgLessThanOrEqualTo(Double value) {
            addCriterion("SCORE_AVG <=", value, "scoreAvg");
            return (Criteria) this;
        }

        public Criteria andScoreAvgIn(List<Double> values) {
            addCriterion("SCORE_AVG in", values, "scoreAvg");
            return (Criteria) this;
        }

        public Criteria andScoreAvgNotIn(List<Double> values) {
            addCriterion("SCORE_AVG not in", values, "scoreAvg");
            return (Criteria) this;
        }

        public Criteria andScoreAvgBetween(Double value1, Double value2) {
            addCriterion("SCORE_AVG between", value1, value2, "scoreAvg");
            return (Criteria) this;
        }

        public Criteria andScoreAvgNotBetween(Double value1, Double value2) {
            addCriterion("SCORE_AVG not between", value1, value2, "scoreAvg");
            return (Criteria) this;
        }

        public Criteria andScoreMaxIsNull() {
            addCriterion("SCORE_MAX is null");
            return (Criteria) this;
        }

        public Criteria andScoreMaxIsNotNull() {
            addCriterion("SCORE_MAX is not null");
            return (Criteria) this;
        }

        public Criteria andScoreMaxEqualTo(Double value) {
            addCriterion("SCORE_MAX =", value, "scoreMax");
            return (Criteria) this;
        }

        public Criteria andScoreMaxNotEqualTo(Double value) {
            addCriterion("SCORE_MAX <>", value, "scoreMax");
            return (Criteria) this;
        }

        public Criteria andScoreMaxGreaterThan(Double value) {
            addCriterion("SCORE_MAX >", value, "scoreMax");
            return (Criteria) this;
        }

        public Criteria andScoreMaxGreaterThanOrEqualTo(Double value) {
            addCriterion("SCORE_MAX >=", value, "scoreMax");
            return (Criteria) this;
        }

        public Criteria andScoreMaxLessThan(Double value) {
            addCriterion("SCORE_MAX <", value, "scoreMax");
            return (Criteria) this;
        }

        public Criteria andScoreMaxLessThanOrEqualTo(Double value) {
            addCriterion("SCORE_MAX <=", value, "scoreMax");
            return (Criteria) this;
        }

        public Criteria andScoreMaxIn(List<Double> values) {
            addCriterion("SCORE_MAX in", values, "scoreMax");
            return (Criteria) this;
        }

        public Criteria andScoreMaxNotIn(List<Double> values) {
            addCriterion("SCORE_MAX not in", values, "scoreMax");
            return (Criteria) this;
        }

        public Criteria andScoreMaxBetween(Double value1, Double value2) {
            addCriterion("SCORE_MAX between", value1, value2, "scoreMax");
            return (Criteria) this;
        }

        public Criteria andScoreMaxNotBetween(Double value1, Double value2) {
            addCriterion("SCORE_MAX not between", value1, value2, "scoreMax");
            return (Criteria) this;
        }

        public Criteria andScoreMinIsNull() {
            addCriterion("SCORE_MIN is null");
            return (Criteria) this;
        }

        public Criteria andScoreMinIsNotNull() {
            addCriterion("SCORE_MIN is not null");
            return (Criteria) this;
        }

        public Criteria andScoreMinEqualTo(Double value) {
            addCriterion("SCORE_MIN =", value, "scoreMin");
            return (Criteria) this;
        }

        public Criteria andScoreMinNotEqualTo(Double value) {
            addCriterion("SCORE_MIN <>", value, "scoreMin");
            return (Criteria) this;
        }

        public Criteria andScoreMinGreaterThan(Double value) {
            addCriterion("SCORE_MIN >", value, "scoreMin");
            return (Criteria) this;
        }

        public Criteria andScoreMinGreaterThanOrEqualTo(Double value) {
            addCriterion("SCORE_MIN >=", value, "scoreMin");
            return (Criteria) this;
        }

        public Criteria andScoreMinLessThan(Double value) {
            addCriterion("SCORE_MIN <", value, "scoreMin");
            return (Criteria) this;
        }

        public Criteria andScoreMinLessThanOrEqualTo(Double value) {
            addCriterion("SCORE_MIN <=", value, "scoreMin");
            return (Criteria) this;
        }

        public Criteria andScoreMinIn(List<Double> values) {
            addCriterion("SCORE_MIN in", values, "scoreMin");
            return (Criteria) this;
        }

        public Criteria andScoreMinNotIn(List<Double> values) {
            addCriterion("SCORE_MIN not in", values, "scoreMin");
            return (Criteria) this;
        }

        public Criteria andScoreMinBetween(Double value1, Double value2) {
            addCriterion("SCORE_MIN between", value1, value2, "scoreMin");
            return (Criteria) this;
        }

        public Criteria andScoreMinNotBetween(Double value1, Double value2) {
            addCriterion("SCORE_MIN not between", value1, value2, "scoreMin");
            return (Criteria) this;
        }

        public Criteria andStandardSIsNull() {
            addCriterion("STANDARD_S is null");
            return (Criteria) this;
        }

        public Criteria andStandardSIsNotNull() {
            addCriterion("STANDARD_S is not null");
            return (Criteria) this;
        }

        public Criteria andStandardSEqualTo(Integer value) {
            addCriterion("STANDARD_S =", value, "standardS");
            return (Criteria) this;
        }

        public Criteria andStandardSNotEqualTo(Integer value) {
            addCriterion("STANDARD_S <>", value, "standardS");
            return (Criteria) this;
        }

        public Criteria andStandardSGreaterThan(Integer value) {
            addCriterion("STANDARD_S >", value, "standardS");
            return (Criteria) this;
        }

        public Criteria andStandardSGreaterThanOrEqualTo(Integer value) {
            addCriterion("STANDARD_S >=", value, "standardS");
            return (Criteria) this;
        }

        public Criteria andStandardSLessThan(Integer value) {
            addCriterion("STANDARD_S <", value, "standardS");
            return (Criteria) this;
        }

        public Criteria andStandardSLessThanOrEqualTo(Integer value) {
            addCriterion("STANDARD_S <=", value, "standardS");
            return (Criteria) this;
        }

        public Criteria andStandardSIn(List<Integer> values) {
            addCriterion("STANDARD_S in", values, "standardS");
            return (Criteria) this;
        }

        public Criteria andStandardSNotIn(List<Integer> values) {
            addCriterion("STANDARD_S not in", values, "standardS");
            return (Criteria) this;
        }

        public Criteria andStandardSBetween(Integer value1, Integer value2) {
            addCriterion("STANDARD_S between", value1, value2, "standardS");
            return (Criteria) this;
        }

        public Criteria andStandardSNotBetween(Integer value1, Integer value2) {
            addCriterion("STANDARD_S not between", value1, value2, "standardS");
            return (Criteria) this;
        }

        public Criteria andStandardDIsNull() {
            addCriterion("STANDARD_D is null");
            return (Criteria) this;
        }

        public Criteria andStandardDIsNotNull() {
            addCriterion("STANDARD_D is not null");
            return (Criteria) this;
        }

        public Criteria andStandardDEqualTo(Integer value) {
            addCriterion("STANDARD_D =", value, "standardD");
            return (Criteria) this;
        }

        public Criteria andStandardDNotEqualTo(Integer value) {
            addCriterion("STANDARD_D <>", value, "standardD");
            return (Criteria) this;
        }

        public Criteria andStandardDGreaterThan(Integer value) {
            addCriterion("STANDARD_D >", value, "standardD");
            return (Criteria) this;
        }

        public Criteria andStandardDGreaterThanOrEqualTo(Integer value) {
            addCriterion("STANDARD_D >=", value, "standardD");
            return (Criteria) this;
        }

        public Criteria andStandardDLessThan(Integer value) {
            addCriterion("STANDARD_D <", value, "standardD");
            return (Criteria) this;
        }

        public Criteria andStandardDLessThanOrEqualTo(Integer value) {
            addCriterion("STANDARD_D <=", value, "standardD");
            return (Criteria) this;
        }

        public Criteria andStandardDIn(List<Integer> values) {
            addCriterion("STANDARD_D in", values, "standardD");
            return (Criteria) this;
        }

        public Criteria andStandardDNotIn(List<Integer> values) {
            addCriterion("STANDARD_D not in", values, "standardD");
            return (Criteria) this;
        }

        public Criteria andStandardDBetween(Integer value1, Integer value2) {
            addCriterion("STANDARD_D between", value1, value2, "standardD");
            return (Criteria) this;
        }

        public Criteria andStandardDNotBetween(Integer value1, Integer value2) {
            addCriterion("STANDARD_D not between", value1, value2, "standardD");
            return (Criteria) this;
        }

        public Criteria andHighAvgIsNull() {
            addCriterion("HIGH_AVG is null");
            return (Criteria) this;
        }

        public Criteria andHighAvgIsNotNull() {
            addCriterion("HIGH_AVG is not null");
            return (Criteria) this;
        }

        public Criteria andHighAvgEqualTo(Double value) {
            addCriterion("HIGH_AVG =", value, "highAvg");
            return (Criteria) this;
        }

        public Criteria andHighAvgNotEqualTo(Double value) {
            addCriterion("HIGH_AVG <>", value, "highAvg");
            return (Criteria) this;
        }

        public Criteria andHighAvgGreaterThan(Double value) {
            addCriterion("HIGH_AVG >", value, "highAvg");
            return (Criteria) this;
        }

        public Criteria andHighAvgGreaterThanOrEqualTo(Double value) {
            addCriterion("HIGH_AVG >=", value, "highAvg");
            return (Criteria) this;
        }

        public Criteria andHighAvgLessThan(Double value) {
            addCriterion("HIGH_AVG <", value, "highAvg");
            return (Criteria) this;
        }

        public Criteria andHighAvgLessThanOrEqualTo(Double value) {
            addCriterion("HIGH_AVG <=", value, "highAvg");
            return (Criteria) this;
        }

        public Criteria andHighAvgIn(List<Double> values) {
            addCriterion("HIGH_AVG in", values, "highAvg");
            return (Criteria) this;
        }

        public Criteria andHighAvgNotIn(List<Double> values) {
            addCriterion("HIGH_AVG not in", values, "highAvg");
            return (Criteria) this;
        }

        public Criteria andHighAvgBetween(Double value1, Double value2) {
            addCriterion("HIGH_AVG between", value1, value2, "highAvg");
            return (Criteria) this;
        }

        public Criteria andHighAvgNotBetween(Double value1, Double value2) {
            addCriterion("HIGH_AVG not between", value1, value2, "highAvg");
            return (Criteria) this;
        }

        public Criteria andLowAvgIsNull() {
            addCriterion("LOW_AVG is null");
            return (Criteria) this;
        }

        public Criteria andLowAvgIsNotNull() {
            addCriterion("LOW_AVG is not null");
            return (Criteria) this;
        }

        public Criteria andLowAvgEqualTo(Double value) {
            addCriterion("LOW_AVG =", value, "lowAvg");
            return (Criteria) this;
        }

        public Criteria andLowAvgNotEqualTo(Double value) {
            addCriterion("LOW_AVG <>", value, "lowAvg");
            return (Criteria) this;
        }

        public Criteria andLowAvgGreaterThan(Double value) {
            addCriterion("LOW_AVG >", value, "lowAvg");
            return (Criteria) this;
        }

        public Criteria andLowAvgGreaterThanOrEqualTo(Double value) {
            addCriterion("LOW_AVG >=", value, "lowAvg");
            return (Criteria) this;
        }

        public Criteria andLowAvgLessThan(Double value) {
            addCriterion("LOW_AVG <", value, "lowAvg");
            return (Criteria) this;
        }

        public Criteria andLowAvgLessThanOrEqualTo(Double value) {
            addCriterion("LOW_AVG <=", value, "lowAvg");
            return (Criteria) this;
        }

        public Criteria andLowAvgIn(List<Double> values) {
            addCriterion("LOW_AVG in", values, "lowAvg");
            return (Criteria) this;
        }

        public Criteria andLowAvgNotIn(List<Double> values) {
            addCriterion("LOW_AVG not in", values, "lowAvg");
            return (Criteria) this;
        }

        public Criteria andLowAvgBetween(Double value1, Double value2) {
            addCriterion("LOW_AVG between", value1, value2, "lowAvg");
            return (Criteria) this;
        }

        public Criteria andLowAvgNotBetween(Double value1, Double value2) {
            addCriterion("LOW_AVG not between", value1, value2, "lowAvg");
            return (Criteria) this;
        }

        public Criteria andHighNumIsNull() {
            addCriterion("HIGH_NUM is null");
            return (Criteria) this;
        }

        public Criteria andHighNumIsNotNull() {
            addCriterion("HIGH_NUM is not null");
            return (Criteria) this;
        }

        public Criteria andHighNumEqualTo(Integer value) {
            addCriterion("HIGH_NUM =", value, "highNum");
            return (Criteria) this;
        }

        public Criteria andHighNumNotEqualTo(Integer value) {
            addCriterion("HIGH_NUM <>", value, "highNum");
            return (Criteria) this;
        }

        public Criteria andHighNumGreaterThan(Integer value) {
            addCriterion("HIGH_NUM >", value, "highNum");
            return (Criteria) this;
        }

        public Criteria andHighNumGreaterThanOrEqualTo(Integer value) {
            addCriterion("HIGH_NUM >=", value, "highNum");
            return (Criteria) this;
        }

        public Criteria andHighNumLessThan(Integer value) {
            addCriterion("HIGH_NUM <", value, "highNum");
            return (Criteria) this;
        }

        public Criteria andHighNumLessThanOrEqualTo(Integer value) {
            addCriterion("HIGH_NUM <=", value, "highNum");
            return (Criteria) this;
        }

        public Criteria andHighNumIn(List<Integer> values) {
            addCriterion("HIGH_NUM in", values, "highNum");
            return (Criteria) this;
        }

        public Criteria andHighNumNotIn(List<Integer> values) {
            addCriterion("HIGH_NUM not in", values, "highNum");
            return (Criteria) this;
        }

        public Criteria andHighNumBetween(Integer value1, Integer value2) {
            addCriterion("HIGH_NUM between", value1, value2, "highNum");
            return (Criteria) this;
        }

        public Criteria andHighNumNotBetween(Integer value1, Integer value2) {
            addCriterion("HIGH_NUM not between", value1, value2, "highNum");
            return (Criteria) this;
        }

        public Criteria andLowNumIsNull() {
            addCriterion("LOW_NUM is null");
            return (Criteria) this;
        }

        public Criteria andLowNumIsNotNull() {
            addCriterion("LOW_NUM is not null");
            return (Criteria) this;
        }

        public Criteria andLowNumEqualTo(Integer value) {
            addCriterion("LOW_NUM =", value, "lowNum");
            return (Criteria) this;
        }

        public Criteria andLowNumNotEqualTo(Integer value) {
            addCriterion("LOW_NUM <>", value, "lowNum");
            return (Criteria) this;
        }

        public Criteria andLowNumGreaterThan(Integer value) {
            addCriterion("LOW_NUM >", value, "lowNum");
            return (Criteria) this;
        }

        public Criteria andLowNumGreaterThanOrEqualTo(Integer value) {
            addCriterion("LOW_NUM >=", value, "lowNum");
            return (Criteria) this;
        }

        public Criteria andLowNumLessThan(Integer value) {
            addCriterion("LOW_NUM <", value, "lowNum");
            return (Criteria) this;
        }

        public Criteria andLowNumLessThanOrEqualTo(Integer value) {
            addCriterion("LOW_NUM <=", value, "lowNum");
            return (Criteria) this;
        }

        public Criteria andLowNumIn(List<Integer> values) {
            addCriterion("LOW_NUM in", values, "lowNum");
            return (Criteria) this;
        }

        public Criteria andLowNumNotIn(List<Integer> values) {
            addCriterion("LOW_NUM not in", values, "lowNum");
            return (Criteria) this;
        }

        public Criteria andLowNumBetween(Integer value1, Integer value2) {
            addCriterion("LOW_NUM between", value1, value2, "lowNum");
            return (Criteria) this;
        }

        public Criteria andLowNumNotBetween(Integer value1, Integer value2) {
            addCriterion("LOW_NUM not between", value1, value2, "lowNum");
            return (Criteria) this;
        }

        public Criteria andExcellentIsNull() {
            addCriterion("EXCELLENT is null");
            return (Criteria) this;
        }

        public Criteria andExcellentIsNotNull() {
            addCriterion("EXCELLENT is not null");
            return (Criteria) this;
        }

        public Criteria andExcellentEqualTo(Integer value) {
            addCriterion("EXCELLENT =", value, "excellent");
            return (Criteria) this;
        }

        public Criteria andExcellentNotEqualTo(Integer value) {
            addCriterion("EXCELLENT <>", value, "excellent");
            return (Criteria) this;
        }

        public Criteria andExcellentGreaterThan(Integer value) {
            addCriterion("EXCELLENT >", value, "excellent");
            return (Criteria) this;
        }

        public Criteria andExcellentGreaterThanOrEqualTo(Integer value) {
            addCriterion("EXCELLENT >=", value, "excellent");
            return (Criteria) this;
        }

        public Criteria andExcellentLessThan(Integer value) {
            addCriterion("EXCELLENT <", value, "excellent");
            return (Criteria) this;
        }

        public Criteria andExcellentLessThanOrEqualTo(Integer value) {
            addCriterion("EXCELLENT <=", value, "excellent");
            return (Criteria) this;
        }

        public Criteria andExcellentIn(List<Integer> values) {
            addCriterion("EXCELLENT in", values, "excellent");
            return (Criteria) this;
        }

        public Criteria andExcellentNotIn(List<Integer> values) {
            addCriterion("EXCELLENT not in", values, "excellent");
            return (Criteria) this;
        }

        public Criteria andExcellentBetween(Integer value1, Integer value2) {
            addCriterion("EXCELLENT between", value1, value2, "excellent");
            return (Criteria) this;
        }

        public Criteria andExcellentNotBetween(Integer value1, Integer value2) {
            addCriterion("EXCELLENT not between", value1, value2, "excellent");
            return (Criteria) this;
        }

        public Criteria andGoodIsNull() {
            addCriterion("GOOD is null");
            return (Criteria) this;
        }

        public Criteria andGoodIsNotNull() {
            addCriterion("GOOD is not null");
            return (Criteria) this;
        }

        public Criteria andGoodEqualTo(Integer value) {
            addCriterion("GOOD =", value, "good");
            return (Criteria) this;
        }

        public Criteria andGoodNotEqualTo(Integer value) {
            addCriterion("GOOD <>", value, "good");
            return (Criteria) this;
        }

        public Criteria andGoodGreaterThan(Integer value) {
            addCriterion("GOOD >", value, "good");
            return (Criteria) this;
        }

        public Criteria andGoodGreaterThanOrEqualTo(Integer value) {
            addCriterion("GOOD >=", value, "good");
            return (Criteria) this;
        }

        public Criteria andGoodLessThan(Integer value) {
            addCriterion("GOOD <", value, "good");
            return (Criteria) this;
        }

        public Criteria andGoodLessThanOrEqualTo(Integer value) {
            addCriterion("GOOD <=", value, "good");
            return (Criteria) this;
        }

        public Criteria andGoodIn(List<Integer> values) {
            addCriterion("GOOD in", values, "good");
            return (Criteria) this;
        }

        public Criteria andGoodNotIn(List<Integer> values) {
            addCriterion("GOOD not in", values, "good");
            return (Criteria) this;
        }

        public Criteria andGoodBetween(Integer value1, Integer value2) {
            addCriterion("GOOD between", value1, value2, "good");
            return (Criteria) this;
        }

        public Criteria andGoodNotBetween(Integer value1, Integer value2) {
            addCriterion("GOOD not between", value1, value2, "good");
            return (Criteria) this;
        }

        public Criteria andPassIsNull() {
            addCriterion("PASS is null");
            return (Criteria) this;
        }

        public Criteria andPassIsNotNull() {
            addCriterion("PASS is not null");
            return (Criteria) this;
        }

        public Criteria andPassEqualTo(Integer value) {
            addCriterion("PASS =", value, "pass");
            return (Criteria) this;
        }

        public Criteria andPassNotEqualTo(Integer value) {
            addCriterion("PASS <>", value, "pass");
            return (Criteria) this;
        }

        public Criteria andPassGreaterThan(Integer value) {
            addCriterion("PASS >", value, "pass");
            return (Criteria) this;
        }

        public Criteria andPassGreaterThanOrEqualTo(Integer value) {
            addCriterion("PASS >=", value, "pass");
            return (Criteria) this;
        }

        public Criteria andPassLessThan(Integer value) {
            addCriterion("PASS <", value, "pass");
            return (Criteria) this;
        }

        public Criteria andPassLessThanOrEqualTo(Integer value) {
            addCriterion("PASS <=", value, "pass");
            return (Criteria) this;
        }

        public Criteria andPassIn(List<Integer> values) {
            addCriterion("PASS in", values, "pass");
            return (Criteria) this;
        }

        public Criteria andPassNotIn(List<Integer> values) {
            addCriterion("PASS not in", values, "pass");
            return (Criteria) this;
        }

        public Criteria andPassBetween(Integer value1, Integer value2) {
            addCriterion("PASS between", value1, value2, "pass");
            return (Criteria) this;
        }

        public Criteria andPassNotBetween(Integer value1, Integer value2) {
            addCriterion("PASS not between", value1, value2, "pass");
            return (Criteria) this;
        }

        public Criteria andWeekIsNull() {
            addCriterion("WEEK is null");
            return (Criteria) this;
        }

        public Criteria andWeekIsNotNull() {
            addCriterion("WEEK is not null");
            return (Criteria) this;
        }

        public Criteria andWeekEqualTo(Integer value) {
            addCriterion("WEEK =", value, "week");
            return (Criteria) this;
        }

        public Criteria andWeekNotEqualTo(Integer value) {
            addCriterion("WEEK <>", value, "week");
            return (Criteria) this;
        }

        public Criteria andWeekGreaterThan(Integer value) {
            addCriterion("WEEK >", value, "week");
            return (Criteria) this;
        }

        public Criteria andWeekGreaterThanOrEqualTo(Integer value) {
            addCriterion("WEEK >=", value, "week");
            return (Criteria) this;
        }

        public Criteria andWeekLessThan(Integer value) {
            addCriterion("WEEK <", value, "week");
            return (Criteria) this;
        }

        public Criteria andWeekLessThanOrEqualTo(Integer value) {
            addCriterion("WEEK <=", value, "week");
            return (Criteria) this;
        }

        public Criteria andWeekIn(List<Integer> values) {
            addCriterion("WEEK in", values, "week");
            return (Criteria) this;
        }

        public Criteria andWeekNotIn(List<Integer> values) {
            addCriterion("WEEK not in", values, "week");
            return (Criteria) this;
        }

        public Criteria andWeekBetween(Integer value1, Integer value2) {
            addCriterion("WEEK between", value1, value2, "week");
            return (Criteria) this;
        }

        public Criteria andWeekNotBetween(Integer value1, Integer value2) {
            addCriterion("WEEK not between", value1, value2, "week");
            return (Criteria) this;
        }

        public Criteria andTerribleIsNull() {
            addCriterion("TERRIBLE is null");
            return (Criteria) this;
        }

        public Criteria andTerribleIsNotNull() {
            addCriterion("TERRIBLE is not null");
            return (Criteria) this;
        }

        public Criteria andTerribleEqualTo(Integer value) {
            addCriterion("TERRIBLE =", value, "terrible");
            return (Criteria) this;
        }

        public Criteria andTerribleNotEqualTo(Integer value) {
            addCriterion("TERRIBLE <>", value, "terrible");
            return (Criteria) this;
        }

        public Criteria andTerribleGreaterThan(Integer value) {
            addCriterion("TERRIBLE >", value, "terrible");
            return (Criteria) this;
        }

        public Criteria andTerribleGreaterThanOrEqualTo(Integer value) {
            addCriterion("TERRIBLE >=", value, "terrible");
            return (Criteria) this;
        }

        public Criteria andTerribleLessThan(Integer value) {
            addCriterion("TERRIBLE <", value, "terrible");
            return (Criteria) this;
        }

        public Criteria andTerribleLessThanOrEqualTo(Integer value) {
            addCriterion("TERRIBLE <=", value, "terrible");
            return (Criteria) this;
        }

        public Criteria andTerribleIn(List<Integer> values) {
            addCriterion("TERRIBLE in", values, "terrible");
            return (Criteria) this;
        }

        public Criteria andTerribleNotIn(List<Integer> values) {
            addCriterion("TERRIBLE not in", values, "terrible");
            return (Criteria) this;
        }

        public Criteria andTerribleBetween(Integer value1, Integer value2) {
            addCriterion("TERRIBLE between", value1, value2, "terrible");
            return (Criteria) this;
        }

        public Criteria andTerribleNotBetween(Integer value1, Integer value2) {
            addCriterion("TERRIBLE not between", value1, value2, "terrible");
            return (Criteria) this;
        }

        public Criteria andTimeIsNull() {
            addCriterion("TIME is null");
            return (Criteria) this;
        }

        public Criteria andTimeIsNotNull() {
            addCriterion("TIME is not null");
            return (Criteria) this;
        }

        public Criteria andTimeEqualTo(Date value) {
            addCriterionForJDBCDate("TIME =", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("TIME <>", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeGreaterThan(Date value) {
            addCriterionForJDBCDate("TIME >", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("TIME >=", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeLessThan(Date value) {
            addCriterionForJDBCDate("TIME <", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("TIME <=", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeIn(List<Date> values) {
            addCriterionForJDBCDate("TIME in", values, "time");
            return (Criteria) this;
        }

        public Criteria andTimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("TIME not in", values, "time");
            return (Criteria) this;
        }

        public Criteria andTimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("TIME between", value1, value2, "time");
            return (Criteria) this;
        }

        public Criteria andTimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("TIME not between", value1, value2, "time");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table e_analy_grade
     *
     * @mbggenerated do_not_delete_during_merge Tue May 26 14:51:53 CST 2015
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table e_analy_grade
     *
     * @mbggenerated Tue May 26 14:51:53 CST 2015
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}