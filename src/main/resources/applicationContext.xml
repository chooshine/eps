<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    
    <tx:annotation-driven />
    <context:annotation-config />
	<aop:aspectj-autoproxy /> <!-- 启动@Aspectj注解的支持 -->
    <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 --> 
    <!-- <context:component-scan base-package="com.eps.dao" />
    <context:component-scan base-package="com.eps.service" /> -->
    <bean name="propertyConfigure" class="com.eps.encrypt.EncryptFromPropertiesFile">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:system.properties</value>
				<value>classpath:sql.properties</value>
			</list>
		</property>
	</bean>
	<bean id="exceptionHandler" class="com.eps.web.ExceptionHandler"/>
	<!-- 数据访问层配置 -->
    <import resource="classpath:eps-dao.xml" />
     <!--服务层配置 -->
    <import resource="classpath:eps-service.xml" />
     <!-- 配置数据源 -->
    <!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close"
          p:driverClass="${jdbc.driverClass}"
          p:jdbcUrl="${jdbc.jdbcUrl}"
          p:user="${jdbc.userName}"
          p:password="${jdbc.password}" 
          p:preferredTestQuery="${jdbc.c3p0.preferredTestQuery}"
          p:idleConnectionTestPeriod="${jdbc.c3p0.idleConnectionTestPeriod}"
          p:maxIdleTime="${jdbc.c3p0.maxIdleTime}"/> -->
          
    <!-- 配置Jdbc模板  -->
    <!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" p:dataSource-ref="dataSource" />
	
	<bean id="nameParameTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate" >
		<constructor-arg name="classicJdbcTemplate" ref="jdbcTemplate"/>
	</bean> -->
	
	<!-- 国际化资源 -->
	<!-- <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource" p:cacheSeconds="15"> 
		<property name="basenames">
			<list>
				<value>classpath:messageResource</value>
			</list>
		</property>	
	</bean>
	
	<bean id="messageService" class="com.eps.service.MessageService"/> -->
	
    <!-- 配置事务管理器 -->
	<!-- <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" /> -->
		
	<!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
	<!-- <aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod"
			expression=" execution(* com.eps.service..*(..))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice> -->
</beans>